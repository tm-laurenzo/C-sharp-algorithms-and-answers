Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.


public class Solution {
    public bool IsValidSudoku(char[][] board) {
        //check if there are none "." repititions
        var checker = new Dictionary<char, int>();
        
        //row checker
        for(int i = 0; i < board.Length; i++){
            foreach(var item in board[i]){
                if(item == '.') continue;
                if(checker.ContainsKey(item) ){
                    return false;
                }
                else{
                    checker.Add(item, 1);
                }
            }
            checker.Clear();
        }
        
        //column checker
        for(int column = 0; column < board.Length; column++){
            for(int row = 0; row < board.Length; row++){
                var item = board[column][row];
                if(item == '.') continue;
                if(checker.ContainsKey(item) ){
                    return false;
                }
                else{
                    checker.Add(item, 1);
                }
            }
            checker.Clear();
        }
        
           
        int[] cubeRowStarters = new int[] {0,3,6};
        int[] cubeColStarters = new int[] {0,3,6};
        
        if(!ThreeByThreeChecker(0,0)) return false;
        if(!ThreeByThreeChecker(3,0)) return false;
        if(!ThreeByThreeChecker(6,0)) return false;
        if(!ThreeByThreeChecker(0,3)) return false;
        if(!ThreeByThreeChecker(3,3)) return false;
        if(!ThreeByThreeChecker(6,3)) return false;
        if(!ThreeByThreeChecker(0,6)) return false;
        if(!ThreeByThreeChecker(3,6)) return false;
        if(!ThreeByThreeChecker(6,6)) return false;
        else return true;
      
        //3x3 checker
        bool ThreeByThreeChecker(int row, int col){
            checker.Clear();
            for(int x= row; x < row + 3; x++){
                for(int y = col; y < col + 3; y++){
                     var item = board[x][y];
                    if(item == '.') continue;
                    if(checker.ContainsKey(item) ){
                        return false;
                    }
                    else{
                        checker.Add(item, 1);
                    }
                }
                
            }
            return true;
        }
        
        
        
        
        
        return false;
    }
}